{
  "methods": {
    "getUpdates": {
      "description": "Use this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.",
      "params": {
        "offset": {
          "type": "Integer",
          "required": false,
          "description": "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an __offset__ higher than its __update_id__. The negative offset can be specified to retrieve updates starting from __-offset__ update from the end of the updates queue. All previous updates will forgotten."
        },
        "limit": {
          "type": "Integer",
          "required": false,
          "description": "Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100."
        },
        "timeout": {
          "type": "Integer",
          "required": false,
          "description": "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only."
        },
        "allowed_updates": {
          "type": "Array of String",
          "required": false,
          "description": "List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\nPlease note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time."
        }
      }
    },
    "setWebhook": {
      "description": "If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot‘s token, you can be pretty sure it’s us.",
      "params": {
        "url": {
          "type": "String",
          "required": true,
          "description": "HTTPS url to send updates to. Use an empty string to remove webhook integration"
        },
        "certificate": {
          "type": "InputFile",
          "required": false,
          "description": "Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details."
        },
        "max_connections": {
          "type": "Integer",
          "required": false,
          "description": "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to __40__. Use lower values to limit the load on your bot‘s server, and higher values to increase your bot’s throughput."
        },
        "allowed_updates": {
          "type": "Array of String",
          "required": false,
          "description": "List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.\nPlease note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time."
        }
      }
    },
    "deleteWebhook": {
      "description": "Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns __True__ on success. Requires no parameters."
    },
    "getWebhookInfo": {
      "description": "Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the __url__ field empty."
    },
    "getMe": {
      "description": "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object."
    },
    "sendMessage": {
      "description": "Use this method to send text messages. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "text": {
          "type": "String",
          "required": true,
          "description": "Text of the message to be sent"
        },
        "parse_mode": {
          "type": "String",
          "required": false,
          "description": "Send __Markdown__ or __HTML__, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message."
        },
        "disable_web_page_preview": {
          "type": "Boolean",
          "required": false,
          "description": "Disables link previews for links in this message"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "forwardMessage": {
      "description": "Use this method to forward messages of any kind. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "from_chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "message_id": {
          "type": "Integer",
          "required": true,
          "description": "Message identifier in the chat specified in __from_chat_id__"
        }
      }
    },
    "sendPhoto": {
      "description": "Use this method to send photos. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "photo": {
          "type": "InputFile or String",
          "required": true,
          "description": "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. More info on Sending Files »"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "Photo caption (may also be used when resending photos by __file_id__), 0-200 characters"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendAudio": {
      "description": "For sending voice messages, use the sendVoice method instead.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "audio": {
          "type": "InputFile or String",
          "required": true,
          "description": "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "Audio caption, 0-200 characters"
        },
        "duration": {
          "type": "Integer",
          "required": false,
          "description": "Duration of the audio in seconds"
        },
        "performer": {
          "type": "String",
          "required": false,
          "description": "Performer"
        },
        "title": {
          "type": "String",
          "required": false,
          "description": "Track name"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendDocument": {
      "description": "Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "document": {
          "type": "InputFile or String",
          "required": true,
          "description": "File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "Document caption (may also be used when resending documents by __file_id__), 0-200 characters"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendVideo": {
      "description": "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "video": {
          "type": "InputFile or String",
          "required": true,
          "description": "Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More info on Sending Files »"
        },
        "duration": {
          "type": "Integer",
          "required": false,
          "description": "Duration of sent video in seconds"
        },
        "width": {
          "type": "Integer",
          "required": false,
          "description": "Video width"
        },
        "height": {
          "type": "Integer",
          "required": false,
          "description": "Video height"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "Video caption (may also be used when resending videos by __file_id__), 0-200 characters"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendVoice": {
      "description": "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "voice": {
          "type": "InputFile or String",
          "required": true,
          "description": "Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "Voice message caption, 0-200 characters"
        },
        "duration": {
          "type": "Integer",
          "required": false,
          "description": "Duration of the voice message in seconds"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendVideoNote": {
      "description": "As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "video_note": {
          "type": "InputFile or String",
          "required": true,
          "description": "Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More info on Sending Files ». Sending video notes by a URL is currently unsupported"
        },
        "duration": {
          "type": "Integer",
          "required": false,
          "description": "Duration of sent video in seconds"
        },
        "length": {
          "type": "Integer",
          "required": false,
          "description": "Video width and height"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendLocation": {
      "description": "Use this method to send point on the map. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "latitude": {
          "type": "Float number",
          "required": true,
          "description": "Latitude of location"
        },
        "longitude": {
          "type": "Float number",
          "required": true,
          "description": "Longitude of location"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendVenue": {
      "description": "Use this method to send information about a venue. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "latitude": {
          "type": "Float number",
          "required": true,
          "description": "Latitude of the venue"
        },
        "longitude": {
          "type": "Float number",
          "required": true,
          "description": "Longitude of the venue"
        },
        "title": {
          "type": "String",
          "required": true,
          "description": "Name of the venue"
        },
        "address": {
          "type": "String",
          "required": true,
          "description": "Address of the venue"
        },
        "foursquare_id": {
          "type": "String",
          "required": false,
          "description": "Foursquare identifier of the venue"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "sendContact": {
      "description": "Use this method to send phone contacts. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "phone_number": {
          "type": "String",
          "required": true,
          "description": "Contact's phone number"
        },
        "first_name": {
          "type": "String",
          "required": true,
          "description": "Contact's first name"
        },
        "last_name": {
          "type": "String",
          "required": false,
          "description": "Contact's last name"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user."
        }
      }
    },
    "sendChatAction": {
      "description": "We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "action": {
          "type": "String",
          "required": true,
          "description": "Type of action to broadcast. Choose one, depending on what the user is about to receive: __typing__ for text messages, __upload_photo__ for photos, __record_video__ or __upload_video__ for videos, __record_audio__ or __upload_audio__ for audio files, __upload_document__ for general files, __find_location__ for location data, __record_video_note__ or __upload_video_note__ for video notes."
        }
      }
    },
    "getUserProfilePhotos": {
      "description": "Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        },
        "offset": {
          "type": "Integer",
          "required": false,
          "description": "Sequential number of the first photo to be returned. By default, all photos are returned."
        },
        "limit": {
          "type": "Integer",
          "required": false,
          "description": "Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100."
        }
      }
    },
    "getFile": {
      "description": "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.",
      "params": {
        "file_id": {
          "type": "String",
          "required": true,
          "description": "File identifier to get info about"
        }
      }
    },
    "kickChatMember": {
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)"
        },
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        },
        "until_date": {
          "type": "Integer",
          "required": false,
          "description": "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever"
        }
      }
    },
    "unbanChatMember": {
      "description": "Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns __True__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)"
        },
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        }
      }
    },
    "restrictChatMember": {
      "description": "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass __True__ for all boolean parameters to lift restrictions from a user. Returns __True__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)"
        },
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        },
        "until_date": {
          "type": "Integer",
          "required": false,
          "description": "Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever"
        },
        "can_send_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the user can send text messages, contacts, locations and venues"
        },
        "can_send_media_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the user can send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages"
        },
        "can_send_other_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the user can send animations, games, stickers and use inline bots, implies can_send_media_messages"
        },
        "can_add_web_page_previews": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the user may add web page previews to their messages, implies can_send_media_messages"
        }
      }
    },
    "promoteChatMember": {
      "description": "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass __False__ for all boolean parameters to demote a user. Returns __True__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        },
        "can_change_info": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can change chat title, photo and other settings"
        },
        "can_post_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can create channel posts, channels only"
        },
        "can_edit_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can edit messages of other users, channels only"
        },
        "can_delete_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can delete messages of other users"
        },
        "can_invite_users": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can invite new users to the chat"
        },
        "can_restrict_members": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can restrict, ban or unban chat members"
        },
        "can_pin_messages": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can pin messages, supergroups only"
        },
        "can_promote_members": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)"
        }
      }
    },
    "exportChatInviteLink": {
      "description": "Use this method to export an invite link to a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns exported invite link as __String__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        }
      }
    },
    "setChatPhoto": {
      "description": "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "photo": {
          "type": "InputFile",
          "required": true,
          "description": "New chat photo, uploaded using multipart/form-data"
        }
      }
    },
    "deleteChatPhoto": {
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        }
      }
    },
    "setChatTitle": {
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "title": {
          "type": "String",
          "required": true,
          "description": "New chat title, 1-255 characters"
        }
      }
    },
    "setChatDescription": {
      "description": "Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns __True__ on success. ",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "description": {
          "type": "String",
          "required": false,
          "description": "New chat description, 0-255 characters"
        }
      }
    },
    "pinChatMessage": {
      "description": "Use this method to pin a message in a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns __True__ on success. ",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)"
        },
        "message_id": {
          "type": "Integer",
          "required": true,
          "description": "Identifier of a message to pin"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if it is not necessary to send a notification to all group members about the new pinned message"
        }
      }
    },
    "unpinChatMessage": {
      "description": "Use this method to unpin a message in a supergroup chat. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns __True__ on success. ",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)"
        }
      }
    },
    "leaveChat": {
      "description": "Use this method for your bot to leave a group, supergroup or channel. Returns __True__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)"
        }
      }
    },
    "getChat": {
      "description": "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)"
        }
      }
    },
    "getChatAdministrators": {
      "description": "Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)"
        }
      }
    },
    "getChatMembersCount": {
      "description": "Use this method to get the number of members in a chat. Returns __Int__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)"
        }
      }
    },
    "getChatMember": {
      "description": "Use this method to get information about a member of a chat. Returns a ChatMember object on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)"
        },
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier of the target user"
        }
      }
    },
    "answerCallbackQuery": {
      "params": {
        "callback_query_id": {
          "type": "String",
          "required": true,
          "description": "Unique identifier for the query to be answered"
        },
        "text": {
          "type": "String",
          "required": false,
          "description": "Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters"
        },
        "show_alert": {
          "type": "Boolean",
          "required": false,
          "description": "If __true__, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to __false__."
        },
        "url": {
          "type": "String",
          "required": false,
          "description": "URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game – note that this will only work if the query comes from a __callback_game__ button.\nOtherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter."
        },
        "cache_time": {
          "type": "Integer",
          "required": false,
          "description": "The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0."
        }
      }
    },
    "editMessageText": {
      "description": "Use this method to edit text and game messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "message_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
        },
        "inline_message_id": {
          "type": "String",
          "required": false,
          "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
        },
        "text": {
          "type": "String",
          "required": true,
          "description": "New text of the message"
        },
        "parse_mode": {
          "type": "String",
          "required": false,
          "description": "Send __Markdown__ or __HTML__, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message."
        },
        "disable_web_page_preview": {
          "type": "Boolean",
          "required": false,
          "description": "Disables link previews for links in this message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "required": false,
          "description": "A JSON-serialized object for an inline keyboard."
        }
      }
    },
    "editMessageCaption": {
      "description": "Use this method to edit captions of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "message_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
        },
        "inline_message_id": {
          "type": "String",
          "required": false,
          "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
        },
        "caption": {
          "type": "String",
          "required": false,
          "description": "New caption of the message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "required": false,
          "description": "A JSON-serialized object for an inline keyboard."
        }
      }
    },
    "editMessageReplyMarkup": {
      "description": "Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).  On success, if edited message is sent by the bot, the edited Message is returned, otherwise __True__ is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "message_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
        },
        "inline_message_id": {
          "type": "String",
          "required": false,
          "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "required": false,
          "description": "A JSON-serialized object for an inline keyboard."
        }
      }
    },
    "deleteMessage": {
      "description": "Use this method to delete a message, including service messages, with the following limitations:\n- A message can only be deleted if it was sent less than 48 hours ago.\n- Bots can delete outgoing messages in groups and supergroups.\n- Bots granted __can_post_messages__ permissions can delete outgoing messages in channels.\n- If the bot is an administrator of a group, it can delete any message there.\n- If the bot has __can_delete_messages__ permission in a supergroup or a channel, it can delete any message there.\nReturns __True__ on success.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "message_id": {
          "type": "Integer",
          "required": true,
          "description": "Identifier of the message to delete"
        }
      }
    },
    "sendSticker": {
      "description": "Use this method to send .webp stickers. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer or String",
          "required": true,
          "description": "Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)"
        },
        "sticker": {
          "type": "InputFile or String",
          "required": true,
          "description": "Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .webp file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply",
          "required": false,
          "description": "Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user."
        }
      }
    },
    "getStickerSet": {
      "description": "Use this method to get a sticker set. On success, a StickerSet object is returned.",
      "params": {
        "name": {
          "type": "String",
          "required": true,
          "description": "Name of the sticker set"
        }
      }
    },
    "uploadStickerFile": {
      "description": "Use this method to upload a .png file with a sticker for later use in __createNewStickerSet__ and __addStickerToSet__ methods (can be used multiple times). Returns the uploaded File on success.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "User identifier of sticker file owner"
        },
        "png_sticker": {
          "type": "InputFile",
          "required": true,
          "description": "**Png** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More info on Sending Files »"
        }
      }
    },
    "createNewStickerSet": {
      "description": "Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. Returns __True__ on success.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "User identifier of created sticker set owner"
        },
        "name": {
          "type": "String",
          "required": true,
          "description": "Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., __animals__). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in __“_by_<bot username>”__. __<bot_username>__ is case insensitive. 1-64 characters."
        },
        "title": {
          "type": "String",
          "required": true,
          "description": "Sticker set title, 1-64 characters"
        },
        "png_sticker": {
          "type": "InputFile or String",
          "required": true,
          "description": "**Png** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a __file_id__ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "emojis": {
          "type": "String",
          "required": true,
          "description": "One or more emoji corresponding to the sticker"
        },
        "contains_masks": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if a set of mask stickers should be created"
        },
        "mask_position": {
          "type": "MaskPosition",
          "required": false,
          "description": "A JSON-serialized object for position where the mask should be placed on faces"
        }
      }
    },
    "addStickerToSet": {
      "description": "Use this method to add a new sticker to a set created by the bot. Returns __True__ on success.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "User identifier of sticker set owner"
        },
        "name": {
          "type": "String",
          "required": true,
          "description": "Sticker set name"
        },
        "png_sticker": {
          "type": "InputFile or String",
          "required": true,
          "description": "**Png** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a __file_id__ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »"
        },
        "emojis": {
          "type": "String",
          "required": true,
          "description": "One or more emoji corresponding to the sticker"
        },
        "mask_position": {
          "type": "MaskPosition",
          "required": false,
          "description": "A JSON-serialized object for position where the mask should be placed on faces"
        }
      }
    },
    "setStickerPositionInSet": {
      "description": "Use this method to move a sticker in a set created by the bot to a specific position . Returns __True__ on success.",
      "params": {
        "sticker": {
          "type": "String",
          "required": true,
          "description": "File identifier of the sticker"
        },
        "position": {
          "type": "Integer",
          "required": true,
          "description": "New sticker position in the set, zero-based"
        }
      }
    },
    "deleteStickerFromSet": {
      "description": "Use this method to delete a sticker from a set created by the bot. Returns __True__ on success.",
      "params": {
        "sticker": {
          "type": "String",
          "required": true,
          "description": "File identifier of the sticker"
        }
      }
    },
    "answerInlineQuery": {
      "description": "Use this method to send answers to an inline query. On success, __True__ is returned.\nNo more than **50** results per query are allowed.",
      "params": {
        "inline_query_id": {
          "type": "String",
          "required": true,
          "description": "Unique identifier for the answered query"
        },
        "results": {
          "type": "Array of InlineQueryResult",
          "required": true,
          "description": "A JSON-serialized array of results for the inline query"
        },
        "cache_time": {
          "type": "Integer",
          "required": false,
          "description": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300."
        },
        "is_personal": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query"
        },
        "next_offset": {
          "type": "String",
          "required": false,
          "description": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes."
        },
        "switch_pm_text": {
          "type": "String",
          "required": false,
          "description": "If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter __switch_pm_parameter__"
        },
        "switch_pm_parameter": {
          "type": "String",
          "required": false,
          "description": "Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.\n__Example:__ An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a ‘Connect your YouTube account’ button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a __switch_inline__ button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
        }
      }
    },
    "sendInvoice": {
      "description": "Use this method to send invoices. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier for the target private chat"
        },
        "title": {
          "type": "String",
          "required": true,
          "description": "Product name, 1-32 characters"
        },
        "description": {
          "type": "String",
          "required": true,
          "description": "Product description, 1-255 characters"
        },
        "payload": {
          "type": "String",
          "required": true,
          "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
        },
        "provider_token": {
          "type": "String",
          "required": true,
          "description": "Payments provider token, obtained via Botfather"
        },
        "start_parameter": {
          "type": "String",
          "required": true,
          "description": "Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter"
        },
        "currency": {
          "type": "String",
          "required": true,
          "description": "Three-letter ISO 4217 currency code, see more on currencies"
        },
        "prices": {
          "type": "Array of LabeledPrice",
          "required": true,
          "description": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
        },
        "photo_url": {
          "type": "String",
          "required": false,
          "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for."
        },
        "photo_size": {
          "type": "Integer",
          "required": false,
          "description": "Photo size"
        },
        "photo_width": {
          "type": "Integer",
          "required": false,
          "description": "Photo width"
        },
        "photo_height": {
          "type": "Integer",
          "required": false,
          "description": "Photo height"
        },
        "need_name": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if you require the user's full name to complete the order"
        },
        "need_phone_number": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if you require the user's phone number to complete the order"
        },
        "need_email": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if you require the user's email to complete the order"
        },
        "need_shipping_address": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if you require the user's shipping address to complete the order"
        },
        "is_flexible": {
          "type": "Boolean",
          "required": false,
          "description": "Pass __True__, if the final price depends on the shipping method"
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "required": false,
          "description": "A JSON-serialized object for an inline keyboard. If empty, one 'Pay `total price`' button will be shown. If not empty, the first button must be a Pay button."
        }
      }
    },
    "answerShippingQuery": {
      "description": "If you sent an invoice requesting a shipping address and the parameter __is_flexible__ was specified, the Bot API will send an Update with a __shipping_query__ field to the bot. Use this method to reply to shipping queries. On success, True is returned.",
      "params": {
        "shipping_query_id": {
          "type": "String",
          "required": true,
          "description": "Unique identifier for the query to be answered"
        },
        "ok": {
          "type": "Boolean",
          "required": true,
          "description": "Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)"
        },
        "shipping_options": {
          "type": "Array of ShippingOption",
          "required": false,
          "description": "Required if __ok__ is True. A JSON-serialized array of available shipping options."
        },
        "error_message": {
          "type": "String",
          "required": false,
          "description": "Required if __ok__ is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user."
        }
      }
    },
    "answerPreCheckoutQuery": {
      "description": "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field __pre_checkout_query__. Use this method to respond to such pre-checkout queries. On success, True is returned. ",
      "params": {
        "pre_checkout_query_id": {
          "type": "String",
          "required": true,
          "description": "Unique identifier for the query to be answered"
        },
        "ok": {
          "type": "Boolean",
          "required": true,
          "description": "Specify __True__ if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use __False__ if there are any problems."
        },
        "error_message": {
          "type": "String",
          "required": false,
          "description": "Required if __ok__ is __False__. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user."
        }
      }
    },
    "sendGame": {
      "description": "Use this method to send a game. On success, the sent Message is returned.",
      "params": {
        "chat_id": {
          "type": "Integer",
          "required": true,
          "description": "Unique identifier for the target chat"
        },
        "game_short_name": {
          "type": "String",
          "required": true,
          "description": "Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather."
        },
        "disable_notification": {
          "type": "Boolean",
          "required": false,
          "description": "Sends the message silently. Users will receive a notification with no sound."
        },
        "reply_to_message_id": {
          "type": "Integer",
          "required": false,
          "description": "If the message is a reply, ID of the original message"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "required": false,
          "description": "A JSON-serialized object for an inline keyboard. If empty, one ‘Play game_title’ button will be shown. If not empty, the first button must launch the game."
        }
      }
    },
    "setGameScore": {
      "description": "Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns __True__. Returns an error, if the new score is not greater than the user's current score in the chat and __force__ is __False__.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "User identifier"
        },
        "score": {
          "type": "Integer",
          "required": true,
          "description": "New score, must be non-negative"
        },
        "force": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters"
        },
        "disable_edit_message": {
          "type": "Boolean",
          "required": false,
          "description": "Pass True, if the game message should not be automatically edited to include the current scoreboard"
        },
        "chat_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat"
        },
        "message_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
        },
        "inline_message_id": {
          "type": "String",
          "required": false,
          "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
        }
      }
    },
    "getGameHighScores": {
      "description": "Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects.",
      "params": {
        "user_id": {
          "type": "Integer",
          "required": true,
          "description": "Target user id"
        },
        "chat_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Unique identifier for the target chat"
        },
        "message_id": {
          "type": "Integer",
          "required": false,
          "description": "Required if __inline_message_id__ is not specified. Identifier of the sent message"
        },
        "inline_message_id": {
          "type": "String",
          "required": false,
          "description": "Required if __chat_id__ and __message_id__ are not specified. Identifier of the inline message"
        }
      }
    }
  },
  "type": {
    "WebhookInfo": {
      "description": "Contains information about the current status of a webhook.",
      "params": {
        "url": {
          "type": "String",
          "description": "Webhook URL, may be empty if webhook is not set up"
        },
        "has_custom_certificate": {
          "type": "Boolean",
          "description": "True, if a custom certificate was provided for webhook certificate checks"
        },
        "pending_update_count": {
          "type": "Integer",
          "description": "Number of updates awaiting delivery"
        },
        "last_error_date": {
          "type": "Integer",
          "optional": true,
          "description": "Unix time for the most recent error that happened when trying to deliver an update via webhook"
        },
        "last_error_message": {
          "type": "String",
          "optional": true,
          "description": "Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook"
        },
        "max_connections": {
          "type": "Integer",
          "optional": true,
          "description": "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery"
        },
        "allowed_updates": {
          "type": "Array of String",
          "optional": true,
          "description": "A list of update types the bot is subscribed to. Defaults to all update types"
        }
      }
    },
    "User": {
      "description": "This object represents a Telegram user or bot.",
      "params": {
        "id": {
          "type": "Integer",
          "description": "Unique identifier for this user or bot"
        },
        "first_name": {
          "type": "String",
          "description": "User‘s or bot’s first name"
        },
        "last_name": {
          "type": "String",
          "optional": true,
          "description": "User‘s or bot’s last name"
        },
        "username": {
          "type": "String",
          "optional": true,
          "description": "User‘s or bot’s username"
        },
        "language_code": {
          "type": "String",
          "optional": true,
          "description": "IETF language tag of the user's language"
        }
      }
    },
    "Chat": {
      "description": "This object represents a chat.",
      "params": {
        "id": {
          "type": "Integer",
          "description": "Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
        },
        "type": {
          "type": "String",
          "description": "Type of chat, can be either “private”, “group”, “supergroup” or “channel”"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title, for supergroups, channels and group chats"
        },
        "username": {
          "type": "String",
          "optional": true,
          "description": "Username, for private chats, supergroups and channels if available"
        },
        "first_name": {
          "type": "String",
          "optional": true,
          "description": "First name of the other party in a private chat"
        },
        "last_name": {
          "type": "String",
          "optional": true,
          "description": "Last name of the other party in a private chat"
        },
        "all_members_are_administrators": {
          "type": "Boolean",
          "optional": true,
          "description": "True if a group has ‘All Members Are Admins’ enabled."
        },
        "photo": {
          "type": "ChatPhoto",
          "optional": true,
          "description": "Chat photo. Returned only in getChat."
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Description, for supergroups and channel chats. Returned only in getChat."
        },
        "invite_link": {
          "type": "String",
          "optional": true,
          "description": "Chat invite link, for supergroups and channel chats. Returned only in getChat."
        }
      }
    },
    "Message": {
      "description": "This object represents a message.",
      "params": {
        "message_id": {
          "type": "Integer",
          "description": "Unique message identifier inside this chat"
        },
        "from": {
          "type": "User",
          "optional": true,
          "description": "Sender, can be empty for messages sent to channels"
        },
        "date": {
          "type": "Integer",
          "description": "Date the message was sent in Unix time"
        },
        "chat": {
          "type": "Chat",
          "description": "Conversation the message belongs to"
        },
        "forward_from": {
          "type": "User",
          "optional": true,
          "description": "For forwarded messages, sender of the original message"
        },
        "forward_from_chat": {
          "type": "Chat",
          "optional": true,
          "description": "For messages forwarded from a channel, information about the original channel"
        },
        "forward_from_message_id": {
          "type": "Integer",
          "optional": true,
          "description": "For forwarded channel posts, identifier of the original message in the channel"
        },
        "forward_date": {
          "type": "Integer",
          "optional": true,
          "description": "For forwarded messages, date the original message was sent in Unix time"
        },
        "reply_to_message": {
          "type": "Message",
          "optional": true,
          "description": "For replies, the original message. Note that the Message object in this field will not contain further __reply_to_message__ fields even if it itself is a reply."
        },
        "edit_date": {
          "type": "Integer",
          "optional": true,
          "description": "Date the message was last edited in Unix time"
        },
        "text": {
          "type": "String",
          "optional": true,
          "description": "For text messages, the actual UTF-8 text of the message, 0-4096 characters."
        },
        "entities": {
          "type": "Array of MessageEntity",
          "optional": true,
          "description": "For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text"
        },
        "audio": {
          "type": "Audio",
          "optional": true,
          "description": "Message is an audio file, information about the file"
        },
        "document": {
          "type": "Document",
          "optional": true,
          "description": "Message is a general file, information about the file"
        },
        "game": {
          "type": "Game",
          "optional": true,
          "description": "Message is a game, information about the game. More about games »"
        },
        "photo": {
          "type": "Array of PhotoSize",
          "optional": true,
          "description": "Message is a photo, available sizes of the photo"
        },
        "sticker": {
          "type": "Sticker",
          "optional": true,
          "description": "Message is a sticker, information about the sticker"
        },
        "video": {
          "type": "Video",
          "optional": true,
          "description": "Message is a video, information about the video"
        },
        "voice": {
          "type": "Voice",
          "optional": true,
          "description": "Message is a voice message, information about the file"
        },
        "video_note": {
          "type": "VideoNote",
          "optional": true,
          "description": "Message is a video note, information about the video message"
        },
        "new_chat_members": {
          "type": "Array of User",
          "optional": true,
          "description": "New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption for the document, photo or video, 0-200 characters"
        },
        "contact": {
          "type": "Contact",
          "optional": true,
          "description": "Message is a shared contact, information about the contact"
        },
        "location": {
          "type": "Location",
          "optional": true,
          "description": "Message is a shared location, information about the location"
        },
        "venue": {
          "type": "Venue",
          "optional": true,
          "description": "Message is a venue, information about the venue"
        },
        "new_chat_member": {
          "type": "User",
          "optional": true,
          "description": "A new member was added to the group, information about them (this member may be the bot itself)"
        },
        "left_chat_member": {
          "type": "User",
          "optional": true,
          "description": "A member was removed from the group, information about them (this member may be the bot itself)"
        },
        "new_chat_title": {
          "type": "String",
          "optional": true,
          "description": "A chat title was changed to this value"
        },
        "new_chat_photo": {
          "type": "Array of PhotoSize",
          "optional": true,
          "description": "A chat photo was change to this value"
        },
        "delete_chat_photo": {
          "type": "True",
          "optional": true,
          "description": "Service message: the chat photo was deleted"
        },
        "group_chat_created": {
          "type": "True",
          "optional": true,
          "description": "Service message: the group has been created"
        },
        "supergroup_chat_created": {
          "type": "True",
          "optional": true,
          "description": "Service message: the supergroup has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup."
        },
        "channel_chat_created": {
          "type": "True",
          "optional": true,
          "description": "Service message: the channel has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel."
        },
        "migrate_to_chat_id": {
          "type": "Integer",
          "optional": true,
          "description": "The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
        },
        "migrate_from_chat_id": {
          "type": "Integer",
          "optional": true,
          "description": "The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
        },
        "pinned_message": {
          "type": "Message",
          "optional": true,
          "description": "Specified message was pinned. Note that the Message object in this field will not contain further __reply_to_message__ fields even if it is itself a reply."
        },
        "invoice": {
          "type": "Invoice",
          "optional": true,
          "description": "Message is an invoice for a payment, information about the invoice. More about payments »"
        },
        "successful_payment": {
          "type": "SuccessfulPayment",
          "optional": true,
          "description": "Message is a service message about a successful payment, information about the payment. More about payments »"
        }
      }
    },
    "MessageEntity": {
      "description": "This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. ",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the entity. Can be __mention__ (`@username`), __hashtag__, __bot_command__, __url__, __email__, __bold__ (bold text), __italic__ (italic text), __code__ (monowidth string), __pre__ (monowidth block), __text_link__ (for clickable text URLs), __text_mention__ (for users without usernames)"
        },
        "offset": {
          "type": "Integer",
          "description": "Offset in UTF-16 code units to the start of the entity"
        },
        "length": {
          "type": "Integer",
          "description": "Length of the entity in UTF-16 code units"
        },
        "url": {
          "type": "String",
          "optional": true,
          "description": "For “text_link” only, url that will be opened after user taps on the text"
        },
        "user": {
          "type": "User",
          "optional": true,
          "description": "For “text_mention” only, the mentioned user"
        }
      }
    },
    "PhotoSize": {
      "description": "This object represents one size of a photo or a file / sticker thumbnail.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "width": {
          "type": "Integer",
          "description": "Photo width"
        },
        "height": {
          "type": "Integer",
          "description": "Photo height"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "Audio": {
      "description": "This object represents an audio file to be treated as music by the Telegram clients.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "duration": {
          "type": "Integer",
          "description": "Duration of the audio in seconds as defined by sender"
        },
        "performer": {
          "type": "String",
          "optional": true,
          "description": "Performer of the audio as defined by sender or by audio tags"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title of the audio as defined by sender or by audio tags"
        },
        "mime_type": {
          "type": "String",
          "optional": true,
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "Document": {
      "description": "This object represents a general file (as opposed to photos, voice messages and audio files).",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique file identifier"
        },
        "thumb": {
          "type": "PhotoSize",
          "optional": true,
          "description": "Document thumbnail as defined by sender"
        },
        "file_name": {
          "type": "String",
          "optional": true,
          "description": "Original filename as defined by sender"
        },
        "mime_type": {
          "type": "String",
          "optional": true,
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "Video": {
      "description": "This object represents a video file.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "width": {
          "type": "Integer",
          "description": "Video width as defined by sender"
        },
        "height": {
          "type": "Integer",
          "description": "Video height as defined by sender"
        },
        "duration": {
          "type": "Integer",
          "description": "Duration of the video in seconds as defined by sender"
        },
        "thumb": {
          "type": "PhotoSize",
          "optional": true,
          "description": "Video thumbnail"
        },
        "mime_type": {
          "type": "String",
          "optional": true,
          "description": "Mime type of a file as defined by sender"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "Voice": {
      "description": "This object represents a voice note.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "duration": {
          "type": "Integer",
          "description": "Duration of the audio in seconds as defined by sender"
        },
        "mime_type": {
          "type": "String",
          "optional": true,
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "VideoNote": {
      "description": "This object represents a video message (available in Telegram apps as of v.4.0).",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "length": {
          "type": "Integer",
          "description": "Video width and height as defined by sender"
        },
        "duration": {
          "type": "Integer",
          "description": "Duration of the video in seconds as defined by sender"
        },
        "thumb": {
          "type": "PhotoSize",
          "optional": true,
          "description": "Video thumbnail"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "Contact": {
      "description": "This object represents a phone contact.",
      "params": {
        "phone_number": {
          "type": "String",
          "description": "Contact's phone number"
        },
        "first_name": {
          "type": "String",
          "description": "Contact's first name"
        },
        "last_name": {
          "type": "String",
          "optional": true,
          "description": "Contact's last name"
        },
        "user_id": {
          "type": "Integer",
          "optional": true,
          "description": "Contact's user identifier in Telegram"
        }
      }
    },
    "Location": {
      "description": "This object represents a point on the map.",
      "params": {
        "longitude": {
          "type": "Float",
          "description": "Longitude as defined by sender"
        },
        "latitude": {
          "type": "Float",
          "description": "Latitude as defined by sender"
        }
      }
    },
    "Venue": {
      "description": "This object represents a venue.",
      "params": {
        "location": {
          "type": "Location",
          "description": "Venue location"
        },
        "title": {
          "type": "String",
          "description": "Name of the venue"
        },
        "address": {
          "type": "String",
          "description": "Address of the venue"
        },
        "foursquare_id": {
          "type": "String",
          "optional": true,
          "description": "Foursquare identifier of the venue"
        }
      }
    },
    "UserProfilePhotos": {
      "description": "This object represent a user's profile pictures.",
      "params": {
        "total_count": {
          "type": "Integer",
          "description": "Total number of profile pictures the target user has"
        },
        "photos": {
          "type": "Array of Array of PhotoSize",
          "description": "Requested profile pictures (in up to 4 sizes each)"
        }
      }
    },
    "File": {
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size, if known"
        },
        "file_path": {
          "type": "String",
          "optional": true,
          "description": "File path. Use `https://api.telegram.org/file/bot<token>/<file_path>;` to get the file."
        }
      }
    },
    "ReplyKeyboardMarkup": {
      "description": "This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).",
      "params": {
        "keyboard": {
          "type": "Array of Array of KeyboardButton",
          "description": "Array of button rows, each represented by an Array of KeyboardButton objects"
        },
        "resize_keyboard": {
          "type": "Boolean",
          "optional": true,
          "description": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to __false__, in which case the custom keyboard is always of the same height as the app's standard keyboard."
        },
        "one_time_keyboard": {
          "type": "Boolean",
          "optional": true,
          "description": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to __false__."
        },
        "selective": {
          "type": "Boolean",
          "optional": true,
          "description": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the __text__ of the Message object; 2) if the bot's message is a reply (has __reply_to_message_id__), sender of the original message.\n__Example:__ A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard."
        }
      }
    },
    "KeyboardButton": {
      "description": "This object represents one button of the reply keyboard. For simple text buttons __String__ can be used instead of this object to specify text of the button. Optional fields are mutually exclusive.",
      "params": {
        "text": {
          "type": "String",
          "description": "Text of the button. If none of the optional fields are used, it will be sent to the bot as a message when the button is pressed"
        },
        "request_contact": {
          "type": "Boolean",
          "optional": true,
          "description": "If __True__, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only"
        },
        "request_location": {
          "type": "Boolean",
          "optional": true,
          "description": "If __True__, the user's current location will be sent when the button is pressed. Available in private chats only"
        }
      }
    },
    "ReplyKeyboardRemove": {
      "description": "Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).",
      "params": {
        "remove_keyboard": {
          "type": "True",
          "description": "Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use __one_time_keyboard__ in ReplyKeyboardMarkup)"
        },
        "selective": {
          "type": "Boolean",
          "optional": true,
          "description": "Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the __text__ of the Message object; 2) if the bot's message is a reply (has __reply_to_message_id__), sender of the original message.\n__Example:__ A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet."
        }
      }
    },
    "InlineKeyboardMarkup": {
      "description": "This object represents an inline keyboard that appears right next to the message it belongs to.",
      "params": {
        "inline_keyboard": {
          "type": "Array of Array of InlineKeyboardButton",
          "description": "Array of button rows, each represented by an Array of InlineKeyboardButton objects"
        }
      }
    },
    "InlineKeyboardButton": {
      "description": "This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.",
      "params": {
        "text": {
          "type": "String",
          "description": "Label text on the button"
        },
        "url": {
          "type": "String",
          "optional": true,
          "description": "HTTP url to be opened when button is pressed"
        },
        "callback_data": {
          "type": "String",
          "optional": true,
          "description": "Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes"
        },
        "switch_inline_query": {
          "type": "String",
          "description": "If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field. Can be empty, in which case just the bot’s username will be inserted."
        },
        "switch_inline_query_current_chat": {
          "type": "String",
          "optional": true,
          "description": "If set, pressing the button will insert the bot‘s username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot’s username will be inserted.\nThis offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options."
        },
        "callback_game": {
          "type": "CallbackGame",
          "description": "Description of the game that will be launched when the user presses the button."
        },
        "pay": {
          "type": "Boolean",
          "description": "Specify True, to send a Pay button."
        }
      }
    },
    "CallbackQuery": {
      "description": "This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field __message__ will be present. If the button was attached to a message sent via the bot (in inline mode), the field __inline_message_id__ will be present. Exactly one of the fields __data__ or __game_short_name__ will be present.",
      "params": {
        "id": {
          "type": "String",
          "description": "Unique identifier for this query"
        },
        "from": {
          "type": "User",
          "description": "Sender"
        },
        "message": {
          "type": "Message",
          "optional": true,
          "description": "Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old"
        },
        "inline_message_id": {
          "type": "String",
          "optional": true,
          "description": "Identifier of the message sent via the bot in inline mode, that originated the query."
        },
        "chat_instance": {
          "type": "String",
          "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games."
        },
        "data": {
          "type": "String",
          "optional": true,
          "description": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field."
        },
        "game_short_name": {
          "type": "String",
          "optional": true,
          "description": "Short name of a Game to be returned, serves as the unique identifier for the game"
        }
      }
    },
    "ForceReply": {
      "description": "Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.",
      "params": {
        "force_reply": {
          "type": "True",
          "description": "Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply'"
        },
        "selective": {
          "type": "Boolean",
          "optional": true,
          "description": "Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the __text__ of the Message object; 2) if the bot's message is a reply (has __reply_to_message_id__), sender of the original message."
        }
      }
    },
    "ChatPhoto": {
      "description": "This object represents a chat photo.",
      "params": {
        "small_file_id": {
          "type": "String",
          "description": "Unique file identifier of small (160x160) chat photo. This file_id can be used only for photo download."
        },
        "big_file_id": {
          "type": "String",
          "description": "Unique file identifier of big (640x640) chat photo. This file_id can be used only for photo download."
        }
      }
    },
    "ChatMember": {
      "description": "This object contains information about one member of a chat.",
      "params": {
        "user": {
          "type": "User",
          "description": "Information about the user"
        },
        "status": {
          "type": "String",
          "description": "The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”"
        },
        "until_date": {
          "type": "Integer",
          "optional": true,
          "description": "Restictred and kicked only. Date when restrictions will be lifted for this user, unix time"
        },
        "can_be_edited": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the bot is allowed to edit administrator privileges of that user"
        },
        "can_change_info": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can change the chat title, photo and other settings"
        },
        "can_post_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can post in the channel, channels only"
        },
        "can_edit_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can edit messages of other users, channels only"
        },
        "can_delete_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can delete messages of other users"
        },
        "can_invite_users": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can invite new users to the chat"
        },
        "can_restrict_members": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can restrict, ban or unban chat members"
        },
        "can_pin_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can pin messages, supergroups only"
        },
        "can_promote_members": {
          "type": "Boolean",
          "optional": true,
          "description": "Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)"
        },
        "can_send_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Restricted only. True, if the user can send text messages, contacts, locations and venues"
        },
        "can_send_media_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Restricted only. True, if the user can send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages"
        },
        "can_send_other_messages": {
          "type": "Boolean",
          "optional": true,
          "description": "Restricted only. True, if the user can send animations, games, stickers and use inline bots, implies can_send_media_messages"
        },
        "can_add_web_page_previews": {
          "type": "Boolean",
          "optional": true,
          "description": "Restricted only. True, if user may add web page previews to his messages, implies can_send_media_messages"
        }
      }
    },
    "ResponseParameters": {
      "description": "Contains information about why a request was unsuccessfull.",
      "params": {
        "migrate_to_chat_id": {
          "type": "Integer",
          "optional": true,
          "description": "The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
        },
        "retry_after": {
          "type": "Integer",
          "optional": true,
          "description": "In case of exceeding flood control, the number of seconds left to wait before the request can be repeated"
        }
      }
    },
    "InputFile": {
      "description": "This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser."
    },
    "Sticker": {
      "description": "This object represents a sticker.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique identifier for this file"
        },
        "width": {
          "type": "Integer",
          "description": "Sticker width"
        },
        "height": {
          "type": "Integer",
          "description": "Sticker height"
        },
        "thumb": {
          "type": "PhotoSize",
          "optional": true,
          "description": "Sticker thumbnail in the .webp or .jpg format"
        },
        "emoji": {
          "type": "String",
          "optional": true,
          "description": "Emoji associated with the sticker"
        },
        "set_name": {
          "type": "String",
          "optional": true,
          "description": "Name of the sticker set to which the sticker belongs"
        },
        "mask_position": {
          "type": "MaskPosition",
          "optional": true,
          "description": "For mask stickers, the position where the mask should be placed"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "StickerSet": {
      "description": "This object represents a sticker set.",
      "params": {
        "name": {
          "type": "String",
          "description": "Sticker set name"
        },
        "title": {
          "type": "String",
          "description": "Sticker set title"
        },
        "contains_masks": {
          "type": "Boolean",
          "description": "__True__, if the sticker set contains masks"
        },
        "stickers": {
          "type": "Array of Sticker",
          "description": "List of all set stickers"
        }
      }
    },
    "MaskPosition": {
      "description": "This object describes the position on faces where a mask should be placed by default.",
      "params": {
        "point": {
          "type": "String",
          "description": "The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”."
        },
        "x_shift": {
          "type": "Float number",
          "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position."
        },
        "y_shift": {
          "type": "Float number",
          "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position."
        },
        "scale": {
          "type": "Float number",
          "description": "Mask scaling coefficient. For example, 2.0 means double size."
        }
      }
    },
    "InlineQuery": {
      "description": "This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.",
      "params": {
        "id": {
          "type": "String",
          "description": "Unique identifier for this query"
        },
        "from": {
          "type": "User",
          "description": "Sender"
        },
        "location": {
          "type": "Location",
          "optional": true,
          "description": "Sender location, only for bots that request user location"
        },
        "query": {
          "type": "String",
          "description": "Text of the query (up to 512 characters)"
        },
        "offset": {
          "type": "String",
          "description": "Offset of the results to be returned, can be controlled by the bot"
        }
      }
    },
    "InlineQueryResultArticle": {
      "description": "Represents a link to an article or web page.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __article__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 Bytes"
        },
        "title": {
          "type": "String",
          "description": "Title of the result"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "description": "Content of the message to be sent"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "url": {
          "type": "String",
          "optional": true,
          "description": "URL of the result"
        },
        "hide_url": {
          "type": "Boolean",
          "optional": true,
          "description": "Pass __True__, if you don't want the URL to be shown in the message"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "thumb_url": {
          "type": "String",
          "optional": true,
          "description": "Url of the thumbnail for the result"
        },
        "thumb_width": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail width"
        },
        "thumb_height": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail height"
        }
      }
    },
    "InlineQueryResultPhoto": {
      "description": "Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the photo.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __photo__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "photo_url": {
          "type": "String",
          "description": "A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB"
        },
        "thumb_url": {
          "type": "String",
          "description": "URL of the thumbnail for the photo"
        },
        "photo_width": {
          "type": "Integer",
          "optional": true,
          "description": "Width of the photo"
        },
        "photo_height": {
          "type": "Integer",
          "optional": true,
          "description": "Height of the photo"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the photo to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the photo"
        }
      }
    },
    "InlineQueryResultGif": {
      "description": "Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the animation.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __gif__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "gif_url": {
          "type": "String",
          "description": "A valid URL for the GIF file. File size must not exceed 1MB"
        },
        "gif_width": {
          "type": "Integer",
          "optional": true,
          "description": "Width of the GIF"
        },
        "gif_height": {
          "type": "Integer",
          "optional": true,
          "description": "Height of the GIF"
        },
        "gif_duration": {
          "type": "Integer",
          "optional": true,
          "description": "Duration of the GIF"
        },
        "thumb_url": {
          "type": "String",
          "description": "URL of the static thumbnail for the result (jpeg or gif)"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the GIF file to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the GIF animation"
        }
      }
    },
    "InlineQueryResultMpeg4Gif": {
      "description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the animation.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __mpeg4_gif__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "mpeg4_url": {
          "type": "String",
          "description": "A valid URL for the MP4 file. File size must not exceed 1MB"
        },
        "mpeg4_width": {
          "type": "Integer",
          "optional": true,
          "description": "Video width"
        },
        "mpeg4_height": {
          "type": "Integer",
          "optional": true,
          "description": "Video height"
        },
        "mpeg4_duration": {
          "type": "Integer",
          "optional": true,
          "description": "Video duration"
        },
        "thumb_url": {
          "type": "String",
          "description": "URL of the static thumbnail (jpeg or gif) for the result"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the MPEG-4 file to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the video animation"
        }
      }
    },
    "InlineQueryResultVideo": {
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __video__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "video_url": {
          "type": "String",
          "description": "A valid URL for the embedded video player or video file"
        },
        "mime_type": {
          "type": "String",
          "description": "Mime type of the content of video url, “text/html” or “video/mp4”"
        },
        "thumb_url": {
          "type": "String",
          "description": "URL of the thumbnail (jpeg only) for the video"
        },
        "title": {
          "type": "String",
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the video to be sent, 0-200 characters"
        },
        "video_width": {
          "type": "Integer",
          "optional": true,
          "description": "Video width"
        },
        "video_height": {
          "type": "Integer",
          "optional": true,
          "description": "Video height"
        },
        "video_duration": {
          "type": "Integer",
          "optional": true,
          "description": "Video duration in seconds"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the video. This field is **required** if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video)."
        }
      }
    },
    "InlineQueryResultAudio": {
      "description": "Represents a link to an mp3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the audio.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __audio__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "audio_url": {
          "type": "String",
          "description": "A valid URL for the audio file"
        },
        "title": {
          "type": "String",
          "description": "Title"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption, 0-200 characters"
        },
        "performer": {
          "type": "String",
          "optional": true,
          "description": "Performer"
        },
        "audio_duration": {
          "type": "Integer",
          "optional": true,
          "description": "Audio duration in seconds"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the audio"
        }
      }
    },
    "InlineQueryResultVoice": {
      "description": "Represents a link to a voice recording in an .ogg container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the the voice message.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __voice__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "voice_url": {
          "type": "String",
          "description": "A valid URL for the voice recording"
        },
        "title": {
          "type": "String",
          "description": "Recording title"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption, 0-200 characters"
        },
        "voice_duration": {
          "type": "Integer",
          "optional": true,
          "description": "Recording duration in seconds"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the voice recording"
        }
      }
    },
    "InlineQueryResultDocument": {
      "description": "Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __document__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "title": {
          "type": "String",
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the document to be sent, 0-200 characters"
        },
        "document_url": {
          "type": "String",
          "description": "A valid URL for the file"
        },
        "mime_type": {
          "type": "String",
          "description": "Mime type of the content of the file, either “application/pdf” or “application/zip”"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the file"
        },
        "thumb_url": {
          "type": "String",
          "optional": true,
          "description": "URL of the thumbnail (jpeg only) for the file"
        },
        "thumb_width": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail width"
        },
        "thumb_height": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail height"
        }
      }
    },
    "InlineQueryResultLocation": {
      "description": "Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the location.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __location__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 Bytes"
        },
        "latitude": {
          "type": "Float number",
          "description": "Location latitude in degrees"
        },
        "longitude": {
          "type": "Float number",
          "description": "Location longitude in degrees"
        },
        "title": {
          "type": "String",
          "description": "Location title"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the location"
        },
        "thumb_url": {
          "type": "String",
          "optional": true,
          "description": "Url of the thumbnail for the result"
        },
        "thumb_width": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail width"
        },
        "thumb_height": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail height"
        }
      }
    },
    "InlineQueryResultVenue": {
      "description": "Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the venue.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __venue__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 Bytes"
        },
        "latitude": {
          "type": "Float",
          "description": "Latitude of the venue location in degrees"
        },
        "longitude": {
          "type": "Float",
          "description": "Longitude of the venue location in degrees"
        },
        "title": {
          "type": "String",
          "description": "Title of the venue"
        },
        "address": {
          "type": "String",
          "description": "Address of the venue"
        },
        "foursquare_id": {
          "type": "String",
          "optional": true,
          "description": "Foursquare identifier of the venue if known"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the venue"
        },
        "thumb_url": {
          "type": "String",
          "optional": true,
          "description": "Url of the thumbnail for the result"
        },
        "thumb_width": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail width"
        },
        "thumb_height": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail height"
        }
      }
    },
    "InlineQueryResultContact": {
      "description": "Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the contact.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __contact__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 Bytes"
        },
        "phone_number": {
          "type": "String",
          "description": "Contact's phone number"
        },
        "first_name": {
          "type": "String",
          "description": "Contact's first name"
        },
        "last_name": {
          "type": "String",
          "optional": true,
          "description": "Contact's last name"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the contact"
        },
        "thumb_url": {
          "type": "String",
          "optional": true,
          "description": "Url of the thumbnail for the result"
        },
        "thumb_width": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail width"
        },
        "thumb_height": {
          "type": "Integer",
          "optional": true,
          "description": "Thumbnail height"
        }
      }
    },
    "InlineQueryResultGame": {
      "description": "Represents a Game.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __game__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "game_short_name": {
          "type": "String",
          "description": "Short name of the game"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        }
      }
    },
    "InlineQueryResultCachedPhoto": {
      "description": "Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the photo.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __photo__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "photo_file_id": {
          "type": "String",
          "description": "A valid file identifier of the photo"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the photo to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the photo"
        }
      }
    },
    "InlineQueryResultCachedGif": {
      "description": "Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with specified content instead of the animation.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __gif__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "gif_file_id": {
          "type": "String",
          "description": "A valid file identifier for the GIF file"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the GIF file to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the GIF animation"
        }
      }
    },
    "InlineQueryResultCachedMpeg4Gif": {
      "description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the animation.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __mpeg4_gif__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "mpeg4_file_id": {
          "type": "String",
          "description": "A valid file identifier for the MP4 file"
        },
        "title": {
          "type": "String",
          "optional": true,
          "description": "Title for the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the MPEG-4 file to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the video animation"
        }
      }
    },
    "InlineQueryResultCachedSticker": {
      "description": "Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the sticker.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __sticker__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "sticker_file_id": {
          "type": "String",
          "description": "A valid file identifier of the sticker"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the sticker"
        }
      }
    },
    "InlineQueryResultCachedDocument": {
      "description": "Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the file.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __document__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "title": {
          "type": "String",
          "description": "Title for the result"
        },
        "document_file_id": {
          "type": "String",
          "description": "A valid file identifier for the file"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the document to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the file"
        }
      }
    },
    "InlineQueryResultCachedVideo": {
      "description": "Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the video.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __video__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "video_file_id": {
          "type": "String",
          "description": "A valid file identifier for the video file"
        },
        "title": {
          "type": "String",
          "description": "Title for the result"
        },
        "description": {
          "type": "String",
          "optional": true,
          "description": "Short description of the result"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption of the video to be sent, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the video"
        }
      }
    },
    "InlineQueryResultCachedVoice": {
      "description": "Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the voice message.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __voice__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "voice_file_id": {
          "type": "String",
          "description": "A valid file identifier for the voice message"
        },
        "title": {
          "type": "String",
          "description": "Voice message title"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the voice message"
        }
      }
    },
    "InlineQueryResultCachedAudio": {
      "description": "Represents a link to an mp3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use __input_message_content__ to send a message with the specified content instead of the audio.",
      "params": {
        "type": {
          "type": "String",
          "description": "Type of the result, must be __audio__"
        },
        "id": {
          "type": "String",
          "description": "Unique identifier for this result, 1-64 bytes"
        },
        "audio_file_id": {
          "type": "String",
          "description": "A valid file identifier for the audio file"
        },
        "caption": {
          "type": "String",
          "optional": true,
          "description": "Caption, 0-200 characters"
        },
        "reply_markup": {
          "type": "InlineKeyboardMarkup",
          "optional": true,
          "description": "Inline keyboard attached to the message"
        },
        "input_message_content": {
          "type": "InputMessageContent",
          "optional": true,
          "description": "Content of the message to be sent instead of the audio"
        }
      }
    },
    "InputTextMessageContent": {
      "description": "Represents the content of a text message to be sent as the result of an inline query. ",
      "params": {
        "message_text": {
          "type": "String",
          "description": "Text of the message to be sent, 1-4096 characters"
        },
        "parse_mode": {
          "type": "String",
          "optional": true,
          "description": "Send __Markdown__ or __HTML__, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message."
        },
        "disable_web_page_preview": {
          "type": "Boolean",
          "optional": true,
          "description": "Disables link previews for links in the sent message"
        }
      }
    },
    "InputLocationMessageContent": {
      "description": "Represents the content of a location message to be sent as the result of an inline query. ",
      "params": {
        "latitude": {
          "type": "Float",
          "description": "Latitude of the location in degrees"
        },
        "longitude": {
          "type": "Float",
          "description": "Longitude of the location in degrees"
        }
      }
    },
    "InputVenueMessageContent": {
      "description": "Represents the content of a venue message to be sent as the result of an inline query. ",
      "params": {
        "latitude": {
          "type": "Float",
          "description": "Latitude of the venue in degrees"
        },
        "longitude": {
          "type": "Float",
          "description": "Longitude of the venue in degrees"
        },
        "title": {
          "type": "String",
          "description": "Name of the venue"
        },
        "address": {
          "type": "String",
          "description": "Address of the venue"
        },
        "foursquare_id": {
          "type": "String",
          "optional": true,
          "description": "Foursquare identifier of the venue, if known"
        }
      }
    },
    "InputContactMessageContent": {
      "description": "Represents the content of a contact message to be sent as the result of an inline query. ",
      "params": {
        "phone_number": {
          "type": "String",
          "description": "Contact's phone number"
        },
        "first_name": {
          "type": "String",
          "description": "Contact's first name"
        },
        "last_name": {
          "type": "String",
          "optional": true,
          "description": "Contact's last name"
        }
      }
    },
    "ChosenInlineResult": {
      "description": "Represents a result of an inline query that was chosen by the user and sent to their chat partner. ",
      "params": {
        "result_id": {
          "type": "String",
          "description": "The unique identifier for the result that was chosen"
        },
        "from": {
          "type": "User",
          "description": "The user that chose the result"
        },
        "location": {
          "type": "Location",
          "optional": true,
          "description": "Sender location, only for bots that require user location"
        },
        "inline_message_id": {
          "type": "String",
          "optional": true,
          "description": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message."
        },
        "query": {
          "type": "String",
          "description": "The query that was used to obtain the result"
        }
      }
    },
    "LabeledPrice": {
      "description": "This object represents a portion of the price for goods or services.",
      "params": {
        "label": {
          "type": "String",
          "description": "Portion label"
        },
        "amount": {
          "type": "Integer",
          "description": "Price of the product in the __smallest units__ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the __exp__ parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        }
      }
    },
    "Invoice": {
      "description": "This object contains basic information about an invoice.",
      "params": {
        "title": {
          "type": "String",
          "description": "Product name"
        },
        "description": {
          "type": "String",
          "description": "Product description"
        },
        "start_parameter": {
          "type": "String",
          "description": "Unique bot deep-linking parameter that can be used to generate this invoice"
        },
        "currency": {
          "type": "String",
          "description": "Three-letter ISO 4217 currency code"
        },
        "total_amount": {
          "type": "Integer",
          "description": "Total price in the __smallest units__ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the __exp__ parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        }
      }
    },
    "ShippingAddress": {
      "description": "This object represents a shipping address.",
      "params": {
        "country_code": {
          "type": "String",
          "description": "ISO 3166-1 alpha-2 country code"
        },
        "state": {
          "type": "String",
          "description": "State, if applicable"
        },
        "city": {
          "type": "String",
          "description": "City"
        },
        "street_line1": {
          "type": "String",
          "description": "First line for the address"
        },
        "street_line2": {
          "type": "String",
          "description": "Second line for the address"
        },
        "post_code": {
          "type": "String",
          "description": "Address post code"
        }
      }
    },
    "OrderInfo": {
      "description": "This object represents information about an order.",
      "params": {
        "name": {
          "type": "String",
          "optional": true,
          "description": "User name"
        },
        "phone_number": {
          "type": "String",
          "optional": true,
          "description": "User's phone number"
        },
        "email": {
          "type": "String",
          "optional": true,
          "description": "User email"
        },
        "shipping_address": {
          "type": "ShippingAddress",
          "optional": true,
          "description": "User shipping address"
        }
      }
    },
    "ShippingOption": {
      "description": "This object represents one shipping option.",
      "params": {
        "id": {
          "type": "String",
          "description": "Shipping option identifier"
        },
        "title": {
          "type": "String",
          "description": "Option title"
        },
        "prices": {
          "type": "Array of LabeledPrice",
          "description": "List of price portions"
        }
      }
    },
    "SuccessfulPayment": {
      "description": "This object contains basic information about a successful payment.",
      "params": {
        "currency": {
          "type": "String",
          "description": "Three-letter ISO 4217 currency code"
        },
        "total_amount": {
          "type": "Integer",
          "description": "Total price in the __smallest units__ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the __exp__ parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        },
        "invoice_payload": {
          "type": "String",
          "description": "Bot specified invoice payload"
        },
        "shipping_option_id": {
          "type": "String",
          "optional": true,
          "description": "Identifier of the shipping option chosen by the user"
        },
        "order_info": {
          "type": "OrderInfo",
          "optional": true,
          "description": "Order info provided by the user"
        },
        "telegram_payment_charge_id": {
          "type": "String",
          "description": "Telegram payment identifier"
        },
        "provider_payment_charge_id": {
          "type": "String",
          "description": "Provider payment identifier"
        }
      }
    },
    "ShippingQuery": {
      "description": "This object contains information about an incoming shipping query.",
      "params": {
        "id": {
          "type": "String",
          "description": "Unique query identifier"
        },
        "from": {
          "type": "User",
          "description": "User who sent the query"
        },
        "invoice_payload": {
          "type": "String",
          "description": "Bot specified invoice payload"
        },
        "shipping_address": {
          "type": "ShippingAddress",
          "description": "User specified shipping address"
        }
      }
    },
    "PreCheckoutQuery": {
      "description": "This object contains information about an incoming pre-checkout query.",
      "params": {
        "id": {
          "type": "String",
          "description": "Unique query identifier"
        },
        "from": {
          "type": "User",
          "description": "User who sent the query"
        },
        "currency": {
          "type": "String",
          "description": "Three-letter ISO 4217 currency code"
        },
        "total_amount": {
          "type": "Integer",
          "description": "Total price in the __smallest units__ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the __exp__ parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        },
        "invoice_payload": {
          "type": "String",
          "description": "Bot specified invoice payload"
        },
        "shipping_option_id": {
          "type": "String",
          "optional": true,
          "description": "Identifier of the shipping option chosen by the user"
        },
        "order_info": {
          "type": "OrderInfo",
          "optional": true,
          "description": "Order info provided by the user"
        }
      }
    },
    "Game": {
      "description": "This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.",
      "params": {
        "title": {
          "type": "String",
          "description": "Title of the game"
        },
        "description": {
          "type": "String",
          "description": "Description of the game"
        },
        "photo": {
          "type": "Array of PhotoSize",
          "description": "Photo that will be displayed in the game message in chats."
        },
        "text": {
          "type": "String",
          "optional": true,
          "description": "Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters."
        },
        "text_entities": {
          "type": "Array of MessageEntity",
          "optional": true,
          "description": "Special entities that appear in __text__, such as usernames, URLs, bot commands, etc."
        },
        "animation": {
          "type": "Animation",
          "optional": true,
          "description": "Animation that will be displayed in the game message in chats. Upload via BotFather"
        }
      }
    },
    "Animation": {
      "description": "You can provide an animation for your game so that it looks stylish in chats (check out Lumberjack for an example). This object represents an animation file to be displayed in the message containing a game.",
      "params": {
        "file_id": {
          "type": "String",
          "description": "Unique file identifier"
        },
        "thumb": {
          "type": "PhotoSize",
          "optional": true,
          "description": "Animation thumbnail as defined by sender"
        },
        "file_name": {
          "type": "String",
          "optional": true,
          "description": "Original animation filename as defined by sender"
        },
        "mime_type": {
          "type": "String",
          "optional": true,
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "Integer",
          "optional": true,
          "description": "File size"
        }
      }
    },
    "GameHighScore": {
      "description": "This object represents one row of the high scores table for a game.",
      "params": {
        "position": {
          "type": "Integer",
          "description": "Position in high score table for the game"
        },
        "user": {
          "type": "User",
          "description": "User"
        },
        "score": {
          "type": "Integer",
          "description": "Score"
        }
      }
    }
  }
}
