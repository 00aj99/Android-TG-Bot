{
  "account->changePhone": {
    "params": {
      "phone_number": {
        "type": "string"
      },
      "phone_code_hash": {
        "type": "string"
      },
      "phone_code": {
        "type": "string"
      }
    },
    "return": "User"
  },
  "account->checkUsername": {
    "params": {
      "username": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "account->confirmPhone": {
    "params": {
      "phone_code_hash": {
        "type": "string"
      },
      "phone_code": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "account->deleteAccount": {
    "params": {
      "reason": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "account->getAccountTTL": {
    "params": {},
    "return": "AccountDaysTTL"
  },
  "account->getAuthorizations": {
    "params": {},
    "return": "account_Authorizations"
  },
  "account->getNotifySettings": {
    "params": {
      "peer": {
        "type": "InputNotifyPeer"
      }
    },
    "return": "PeerNotifySettings"
  },
  "account->getPassword": {
    "params": {},
    "return": "account_Password"
  },
  "account->getPasswordSettings": {
    "params": {
      "current_password_hash": {
        "type": "bytes"
      }
    },
    "return": "account_PasswordSettings"
  },
  "account->getPrivacy": {
    "params": {
      "key": {
        "type": "InputPrivacyKey"
      }
    },
    "return": "account_PrivacyRules"
  },
  "account->getTmpPassword": {
    "params": {
      "password_hash": {
        "type": "bytes"
      },
      "period": {
        "type": "int"
      }
    },
    "return": "account_TmpPassword"
  },
  "account->getWallPapers": {
    "params": {},
    "return": "Vector_of_WallPaper"
  },
  "account->registerDevice": {
    "params": {
      "token_type": {
        "type": "int"
      },
      "token": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "account->reportPeer": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "reason": {
        "type": "ReportReason"
      }
    },
    "return": "Bool"
  },
  "account->resetAuthorization": {
    "params": {
      "hash": {
        "type": "long"
      }
    },
    "return": "Bool"
  },
  "account->resetNotifySettings": {
    "params": {},
    "return": "Bool"
  },
  "account->sendChangePhoneCode": {
    "params": {
      "allow_flashcall": {
        "type": "Bool"
      },
      "phone_number": {
        "type": "string"
      },
      "current_number": {
        "type": "Bool"
      }
    },
    "return": "auth_SentCode"
  },
  "account->sendConfirmPhoneCode": {
    "params": {
      "allow_flashcall": {
        "type": "Bool"
      },
      "hash": {
        "type": "string"
      },
      "current_number": {
        "type": "Bool"
      }
    },
    "return": "auth_SentCode"
  },
  "account->setAccountTTL": {
    "params": {
      "ttl": {
        "type": "AccountDaysTTL"
      }
    },
    "return": "Bool"
  },
  "account->setPrivacy": {
    "params": {
      "key": {
        "type": "InputPrivacyKey"
      },
      "rules": {
        "type": "Array of InputPrivacyRule"
      }
    },
    "return": "account_PrivacyRules"
  },
  "account->unregisterDevice": {
    "params": {
      "token_type": {
        "type": "int"
      },
      "token": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "account->updateDeviceLocked": {
    "params": {
      "period": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "account->updateNotifySettings": {
    "params": {
      "peer": {
        "type": "InputNotifyPeer"
      },
      "settings": {
        "type": "InputPeerNotifySettings"
      }
    },
    "return": "Bool"
  },
  "account->updatePasswordSettings": {
    "params": {
      "current_password_hash": {
        "type": "bytes"
      },
      "new_settings": {
        "type": "account_PasswordInputSettings"
      }
    },
    "return": "Bool"
  },
  "account->updateProfile": {
    "params": {
      "first_name": {
        "type": "string"
      },
      "last_name": {
        "type": "string"
      },
      "about": {
        "type": "string"
      }
    },
    "return": "User"
  },
  "account->updateStatus": {
    "params": {
      "offline": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "account->updateUsername": {
    "params": {
      "username": {
        "type": "string"
      }
    },
    "return": "User"
  },
  "auth->bindTempAuthKey": {
    "params": {
      "perm_auth_key_id": {
        "type": "long"
      },
      "nonce": {
        "type": "long"
      },
      "expires_at": {
        "type": "int"
      },
      "encrypted_message": {
        "type": "bytes"
      }
    },
    "return": "Bool"
  },
  "auth->cancelCode": {
    "params": {
      "phone_number": {
        "type": "string"
      },
      "phone_code_hash": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "auth->checkPassword": {
    "params": {
      "password_hash": {
        "type": "bytes"
      }
    },
    "return": "auth_Authorization"
  },
  "auth->checkPhone": {
    "params": {
      "phone_number": {
        "type": "string"
      }
    },
    "return": "auth_CheckedPhone"
  },
  "auth->dropTempAuthKeys": {
    "params": {
      "except_auth_keys": {
        "type": "Array of long"
      }
    },
    "return": "Bool"
  },
  "auth->exportAuthorization": {
    "params": {
      "dc_id": {
        "type": "int"
      }
    },
    "return": "auth_ExportedAuthorization"
  },
  "auth->importAuthorization": {
    "params": {
      "id": {
        "type": "int"
      },
      "bytes": {
        "type": "bytes"
      }
    },
    "return": "auth_Authorization"
  },
  "auth->importBotAuthorization": {
    "params": {
      "api_id": {
        "type": "int"
      },
      "api_hash": {
        "type": "string"
      },
      "bot_auth_token": {
        "type": "string"
      }
    },
    "return": "auth_Authorization"
  },
  "auth->logOut": {
    "params": {},
    "return": "Bool"
  },
  "auth->recoverPassword": {
    "params": {
      "code": {
        "type": "string"
      }
    },
    "return": "auth_Authorization"
  },
  "auth->requestPasswordRecovery": {
    "params": {},
    "return": "auth_PasswordRecovery"
  },
  "auth->resendCode": {
    "params": {
      "phone_number": {
        "type": "string"
      },
      "phone_code_hash": {
        "type": "string"
      }
    },
    "return": "auth_SentCode"
  },
  "auth->resetAuthorizations": {
    "params": {},
    "return": "Bool"
  },
  "auth->sendCode": {
    "params": {
      "allow_flashcall": {
        "type": "Bool"
      },
      "phone_number": {
        "type": "string"
      },
      "current_number": {
        "type": "Bool"
      },
      "api_id": {
        "type": "int"
      },
      "api_hash": {
        "type": "string"
      }
    },
    "return": "auth_SentCode"
  },
  "auth->sendInvites": {
    "params": {
      "phone_numbers": {
        "type": "Array of string"
      },
      "message": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "auth->signIn": {
    "params": {
      "phone_number": {
        "type": "string"
      },
      "phone_code_hash": {
        "type": "string"
      },
      "phone_code": {
        "type": "string"
      }
    },
    "return": "auth_Authorization"
  },
  "auth->signUp": {
    "params": {
      "phone_number": {
        "type": "string"
      },
      "phone_code_hash": {
        "type": "string"
      },
      "phone_code": {
        "type": "string"
      },
      "first_name": {
        "type": "string"
      },
      "last_name": {
        "type": "string"
      }
    },
    "return": "auth_Authorization"
  },
  "bots->answerWebhookJSONQuery": {
    "params": {
      "query_id": {
        "type": "long"
      },
      "data": {
        "type": "DataJSON"
      }
    },
    "return": "Bool"
  },
  "bots->sendCustomRequest": {
    "params": {
      "custom_method": {
        "type": "string"
      },
      "params": {
        "type": "DataJSON"
      }
    },
    "return": "DataJSON"
  },
  "channels->checkUsername": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "username": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "channels->createChannel": {
    "params": {
      "broadcast": {
        "type": "Bool"
      },
      "megagroup": {
        "type": "Bool"
      },
      "title": {
        "type": "string"
      },
      "about": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "channels->deleteChannel": {
    "params": {
      "channel": {
        "type": "InputChannel"
      }
    },
    "return": "Updates"
  },
  "channels->deleteMessages": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_AffectedMessages"
  },
  "channels->deleteUserHistory": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "user_id": {
        "type": "InputUser"
      }
    },
    "return": "messages_AffectedHistory"
  },
  "channels->editAbout": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "about": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "channels->editAdmin": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "user_id": {
        "type": "InputUser"
      },
      "admin_rights": {
        "type": "ChannelAdminRights"
      }
    },
    "return": "Updates"
  },
  "channels->editBanned": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "user_id": {
        "type": "InputUser"
      },
      "banned_rights": {
        "type": "ChannelBannedRights"
      }
    },
    "return": "Updates"
  },
  "channels->editPhoto": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "photo": {
        "type": "InputChatPhoto"
      }
    },
    "return": "Updates"
  },
  "channels->editTitle": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "title": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "channels->exportInvite": {
    "params": {
      "channel": {
        "type": "InputChannel"
      }
    },
    "return": "ExportedChatInvite"
  },
  "channels->exportMessageLink": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "id": {
        "type": "int"
      }
    },
    "return": "ExportedMessageLink"
  },
  "channels->getAdminLog": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "q": {
        "type": "string"
      },
      "events_filter": {
        "type": "ChannelAdminLogEventsFilter"
      },
      "admins": {
        "type": "Array of InputUser"
      },
      "max_id": {
        "type": "long"
      },
      "min_id": {
        "type": "long"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "channels_AdminLogResults"
  },
  "channels->getAdminedPublicChannels": {
    "params": {},
    "return": "messages_Chats"
  },
  "channels->getChannels": {
    "params": {
      "id": {
        "type": "Array of InputChannel"
      }
    },
    "return": "messages_Chats"
  },
  "channels->getFullChannel": {
    "params": {
      "channel": {
        "type": "InputChannel"
      }
    },
    "return": "messages_ChatFull"
  },
  "channels->getMessages": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_Messages"
  },
  "channels->getParticipant": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "user_id": {
        "type": "InputUser"
      }
    },
    "return": "channels_ChannelParticipant"
  },
  "channels->getParticipants": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "filter": {
        "type": "ChannelParticipantsFilter"
      },
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "channels_ChannelParticipants"
  },
  "channels->inviteToChannel": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "users": {
        "type": "Array of InputUser"
      }
    },
    "return": "Updates"
  },
  "channels->joinChannel": {
    "params": {
      "channel": {
        "type": "InputChannel"
      }
    },
    "return": "Updates"
  },
  "channels->leaveChannel": {
    "params": {
      "channel": {
        "type": "InputChannel"
      }
    },
    "return": "Updates"
  },
  "channels->readHistory": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "max_id": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "channels->reportSpam": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "user_id": {
        "type": "InputUser"
      },
      "id": {
        "type": "Array of int"
      }
    },
    "return": "Bool"
  },
  "channels->toggleInvites": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "enabled": {
        "type": "Bool"
      }
    },
    "return": "Updates"
  },
  "channels->toggleSignatures": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "enabled": {
        "type": "Bool"
      }
    },
    "return": "Updates"
  },
  "channels->updatePinnedMessage": {
    "params": {
      "silent": {
        "type": "Bool"
      },
      "channel": {
        "type": "InputChannel"
      },
      "id": {
        "type": "int"
      }
    },
    "return": "Updates"
  },
  "channels->updateUsername": {
    "params": {
      "channel": {
        "type": "InputChannel"
      },
      "username": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "contacts->block": {
    "params": {
      "id": {
        "type": "InputUser"
      }
    },
    "return": "Bool"
  },
  "contacts->deleteContact": {
    "params": {
      "id": {
        "type": "InputUser"
      }
    },
    "return": "contacts_Link"
  },
  "contacts->deleteContacts": {
    "params": {
      "id": {
        "type": "Array of InputUser"
      }
    },
    "return": "Bool"
  },
  "contacts->exportCard": {
    "params": {},
    "return": "Vector_of_int"
  },
  "contacts->getBlocked": {
    "params": {
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "contacts_Blocked"
  },
  "contacts->getContacts": {
    "params": {
      "hash": {
        "type": "string"
      }
    },
    "return": "contacts_Contacts"
  },
  "contacts->getStatuses": {
    "params": {},
    "return": "Vector_of_ContactStatus"
  },
  "contacts->getTopPeers": {
    "params": {
      "correspondents": {
        "type": "Bool"
      },
      "bots_pm": {
        "type": "Bool"
      },
      "bots_inline": {
        "type": "Bool"
      },
      "phone_calls": {
        "type": "Bool"
      },
      "groups": {
        "type": "Bool"
      },
      "channels": {
        "type": "Bool"
      },
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      },
      "hash": {
        "type": "int"
      }
    },
    "return": "contacts_TopPeers"
  },
  "contacts->importCard": {
    "params": {
      "export_card": {
        "type": "Array of int"
      }
    },
    "return": "User"
  },
  "contacts->importContacts": {
    "params": {
      "contacts": {
        "type": "Array of InputContact"
      },
      "replace": {
        "type": "Bool"
      }
    },
    "return": "contacts_ImportedContacts"
  },
  "contacts->resetTopPeerRating": {
    "params": {
      "category": {
        "type": "TopPeerCategory"
      },
      "peer": {
        "type": "InputPeer"
      }
    },
    "return": "Bool"
  },
  "contacts->resolveUsername": {
    "params": {
      "username": {
        "type": "string"
      }
    },
    "return": "contacts_ResolvedPeer"
  },
  "contacts->search": {
    "params": {
      "q": {
        "type": "string"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "contacts_Found"
  },
  "contacts->unblock": {
    "params": {
      "id": {
        "type": "InputUser"
      }
    },
    "return": "Bool"
  },
  "contest->saveDeveloperInfo": {
    "params": {
      "vk_id": {
        "type": "int"
      },
      "name": {
        "type": "string"
      },
      "phone_number": {
        "type": "string"
      },
      "age": {
        "type": "int"
      },
      "city": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "destroy_auth_key": {
    "params": {},
    "return": "DestroyAuthKeyRes"
  },
  "destroy_session": {
    "params": {
      "session_id": {
        "type": "long"
      }
    },
    "return": "DestroySessionRes"
  },
  "get_future_salts": {
    "params": {
      "num": {
        "type": "int"
      }
    },
    "return": "FutureSalts"
  },
  "help->getAppChangelog": {
    "params": {
      "prev_app_version": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "help->getAppUpdate": {
    "params": {},
    "return": "help_AppUpdate"
  },
  "help->getCdnConfig": {
    "params": {},
    "return": "CdnConfig"
  },
  "help->getConfig": {
    "params": {},
    "return": "Config"
  },
  "help->getInviteText": {
    "params": {},
    "return": "help_InviteText"
  },
  "help->getNearestDc": {
    "params": {},
    "return": "NearestDc"
  },
  "help->getSupport": {
    "params": {},
    "return": "help_Support"
  },
  "help->getTermsOfService": {
    "params": {},
    "return": "help_TermsOfService"
  },
  "help->saveAppLog": {
    "params": {
      "events": {
        "type": "Array of InputAppEvent"
      }
    },
    "return": "Bool"
  },
  "help->setBotUpdatesStatus": {
    "params": {
      "pending_updates_count": {
        "type": "int"
      },
      "message": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "initConnection": {
    "params": {
      "api_id": {
        "type": "int"
      },
      "device_model": {
        "type": "string"
      },
      "system_version": {
        "type": "string"
      },
      "app_version": {
        "type": "string"
      },
      "system_lang_code": {
        "type": "string"
      },
      "lang_pack": {
        "type": "string"
      },
      "lang_code": {
        "type": "string"
      },
      "query": {
        "type": "!X"
      }
    },
    "return": "X"
  },
  "invokeAfterMsg": {
    "params": {
      "msg_id": {
        "type": "long"
      },
      "query": {
        "type": "!X"
      }
    },
    "return": "X"
  },
  "invokeAfterMsgs": {
    "params": {
      "msg_ids": {
        "type": "Array of long"
      },
      "query": {
        "type": "!X"
      }
    },
    "return": "X"
  },
  "invokeWithLayer": {
    "params": {
      "layer": {
        "type": "int"
      },
      "query": {
        "type": "!X"
      }
    },
    "return": "X"
  },
  "invokeWithoutUpdates": {
    "params": {
      "query": {
        "type": "!X"
      }
    },
    "return": "X"
  },
  "langpack->getDifference": {
    "params": {
      "from_version": {
        "type": "int"
      }
    },
    "return": "LangPackDifference"
  },
  "langpack->getLangPack": {
    "params": {
      "lang_code": {
        "type": "string"
      }
    },
    "return": "LangPackDifference"
  },
  "langpack->getLanguages": {
    "params": {},
    "return": "Vector_of_LangPackLanguage"
  },
  "langpack->getStrings": {
    "params": {
      "lang_code": {
        "type": "string"
      },
      "keys": {
        "type": "Array of string"
      }
    },
    "return": "Vector_of_LangPackString"
  },
  "messages->acceptEncryption": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "g_b": {
        "type": "bytes"
      },
      "key_fingerprint": {
        "type": "long"
      }
    },
    "return": "EncryptedChat"
  },
  "messages->addChatUser": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "user_id": {
        "type": "InputUser"
      },
      "fwd_limit": {
        "type": "int"
      }
    },
    "return": "Updates"
  },
  "messages->checkChatInvite": {
    "params": {
      "hash": {
        "type": "string"
      }
    },
    "return": "ChatInvite"
  },
  "messages->clearRecentStickers": {
    "params": {
      "attached": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "messages->createChat": {
    "params": {
      "users": {
        "type": "Array of InputUser"
      },
      "title": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "messages->deleteChatUser": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "user_id": {
        "type": "InputUser"
      }
    },
    "return": "Updates"
  },
  "messages->deleteHistory": {
    "params": {
      "just_clear": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "max_id": {
        "type": "int"
      }
    },
    "return": "messages_AffectedHistory"
  },
  "messages->deleteMessages": {
    "params": {
      "revoke": {
        "type": "Bool"
      },
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_AffectedMessages"
  },
  "messages->discardEncryption": {
    "params": {
      "chat_id": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "messages->editChatAdmin": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "user_id": {
        "type": "InputUser"
      },
      "is_admin": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "messages->editChatPhoto": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "photo": {
        "type": "InputChatPhoto"
      }
    },
    "return": "Updates"
  },
  "messages->editChatTitle": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "title": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "messages->editInlineBotMessage": {
    "params": {
      "no_webpage": {
        "type": "Bool"
      },
      "id": {
        "type": "InputBotInlineMessageID"
      },
      "message": {
        "type": "string"
      },
      "reply_markup": {
        "type": "ReplyMarkup"
      },
      "entities": {
        "type": "Array of MessageEntity"
      }
    },
    "return": "Bool"
  },
  "messages->editMessage": {
    "params": {
      "no_webpage": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "int"
      },
      "message": {
        "type": "string"
      },
      "reply_markup": {
        "type": "ReplyMarkup"
      },
      "entities": {
        "type": "Array of MessageEntity"
      }
    },
    "return": "Updates"
  },
  "messages->exportChatInvite": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      }
    },
    "return": "ExportedChatInvite"
  },
  "messages->forwardMessage": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "int"
      }
    },
    "return": "Updates"
  },
  "messages->forwardMessages": {
    "params": {
      "silent": {
        "type": "Bool"
      },
      "background": {
        "type": "Bool"
      },
      "with_my_score": {
        "type": "Bool"
      },
      "from_peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "Array of int"
      },
      "to_peer": {
        "type": "InputPeer"
      }
    },
    "return": "Updates"
  },
  "messages->getAllChats": {
    "params": {
      "except_ids": {
        "type": "Array of int"
      }
    },
    "return": "messages_Chats"
  },
  "messages->getAllDrafts": {
    "params": {},
    "return": "Updates"
  },
  "messages->getAllStickers": {
    "params": {
      "hash": {
        "type": "int"
      }
    },
    "return": "messages_AllStickers"
  },
  "messages->getArchivedStickers": {
    "params": {
      "masks": {
        "type": "Bool"
      },
      "offset_id": {
        "type": "long"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "messages_ArchivedStickers"
  },
  "messages->getAttachedStickers": {
    "params": {
      "media": {
        "type": "InputStickeredMedia"
      }
    },
    "return": "Vector_of_StickerSetCovered"
  },
  "messages->getBotCallbackAnswer": {
    "params": {
      "game": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "msg_id": {
        "type": "int"
      },
      "data": {
        "type": "bytes"
      }
    },
    "return": "messages_BotCallbackAnswer"
  },
  "messages->getChats": {
    "params": {
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_Chats"
  },
  "messages->getCommonChats": {
    "params": {
      "user_id": {
        "type": "InputUser"
      },
      "max_id": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "messages_Chats"
  },
  "messages->getDhConfig": {
    "params": {
      "version": {
        "type": "int"
      },
      "random_length": {
        "type": "int"
      }
    },
    "return": "messages_DhConfig"
  },
  "messages->getDialogs": {
    "params": {
      "exclude_pinned": {
        "type": "Bool"
      },
      "offset_date": {
        "type": "int"
      },
      "offset_id": {
        "type": "int"
      },
      "offset_peer": {
        "type": "InputPeer"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "messages_Dialogs"
  },
  "messages->getDocumentByHash": {
    "params": {
      "sha256": {
        "type": "bytes"
      },
      "size": {
        "type": "int"
      },
      "mime_type": {
        "type": "string"
      }
    },
    "return": "Document"
  },
  "messages->getFeaturedStickers": {
    "params": {
      "hash": {
        "type": "int"
      }
    },
    "return": "messages_FeaturedStickers"
  },
  "messages->getFullChat": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      }
    },
    "return": "messages_ChatFull"
  },
  "messages->getGameHighScores": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "int"
      },
      "user_id": {
        "type": "InputUser"
      }
    },
    "return": "messages_HighScores"
  },
  "messages->getHistory": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "offset_id": {
        "type": "int"
      },
      "offset_date": {
        "type": "int"
      },
      "add_offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      },
      "max_id": {
        "type": "int"
      },
      "min_id": {
        "type": "int"
      }
    },
    "return": "messages_Messages"
  },
  "messages->getInlineBotResults": {
    "params": {
      "bot": {
        "type": "InputUser"
      },
      "peer": {
        "type": "InputPeer"
      },
      "geo_point": {
        "type": "InputGeoPoint"
      },
      "query": {
        "type": "string"
      },
      "offset": {
        "type": "string"
      }
    },
    "return": "messages_BotResults"
  },
  "messages->getInlineGameHighScores": {
    "params": {
      "id": {
        "type": "InputBotInlineMessageID"
      },
      "user_id": {
        "type": "InputUser"
      }
    },
    "return": "messages_HighScores"
  },
  "messages->getMaskStickers": {
    "params": {
      "hash": {
        "type": "int"
      }
    },
    "return": "messages_AllStickers"
  },
  "messages->getMessageEditData": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "int"
      }
    },
    "return": "messages_MessageEditData"
  },
  "messages->getMessages": {
    "params": {
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_Messages"
  },
  "messages->getMessagesViews": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "Array of int"
      },
      "increment": {
        "type": "Bool"
      }
    },
    "return": "Vector_of_int"
  },
  "messages->getPeerDialogs": {
    "params": {
      "peers": {
        "type": "Array of InputPeer"
      }
    },
    "return": "messages_PeerDialogs"
  },
  "messages->getPeerSettings": {
    "params": {
      "peer": {
        "type": "InputPeer"
      }
    },
    "return": "PeerSettings"
  },
  "messages->getPinnedDialogs": {
    "params": {},
    "return": "messages_PeerDialogs"
  },
  "messages->getRecentStickers": {
    "params": {
      "attached": {
        "type": "Bool"
      },
      "hash": {
        "type": "int"
      }
    },
    "return": "messages_RecentStickers"
  },
  "messages->getSavedGifs": {
    "params": {
      "hash": {
        "type": "int"
      }
    },
    "return": "messages_SavedGifs"
  },
  "messages->getStickerSet": {
    "params": {
      "stickerset": {
        "type": "InputStickerSet"
      }
    },
    "return": "messages_StickerSet"
  },
  "messages->getWebPage": {
    "params": {
      "url": {
        "type": "string"
      },
      "hash": {
        "type": "int"
      }
    },
    "return": "WebPage"
  },
  "messages->getWebPagePreview": {
    "params": {
      "message": {
        "type": "string"
      }
    },
    "return": "MessageMedia"
  },
  "messages->hideReportSpam": {
    "params": {
      "peer": {
        "type": "InputPeer"
      }
    },
    "return": "Bool"
  },
  "messages->importChatInvite": {
    "params": {
      "hash": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "messages->installStickerSet": {
    "params": {
      "stickerset": {
        "type": "InputStickerSet"
      },
      "archived": {
        "type": "Bool"
      }
    },
    "return": "messages_StickerSetInstallResult"
  },
  "messages->migrateChat": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      }
    },
    "return": "Updates"
  },
  "messages->readEncryptedHistory": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "max_date": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "messages->readFeaturedStickers": {
    "params": {
      "id": {
        "type": "Array of long"
      }
    },
    "return": "Bool"
  },
  "messages->readHistory": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "max_id": {
        "type": "int"
      }
    },
    "return": "messages_AffectedMessages"
  },
  "messages->readMessageContents": {
    "params": {
      "id": {
        "type": "Array of int"
      }
    },
    "return": "messages_AffectedMessages"
  },
  "messages->receivedMessages": {
    "params": {
      "max_id": {
        "type": "int"
      }
    },
    "return": "Vector_of_ReceivedNotifyMessage"
  },
  "messages->receivedQueue": {
    "params": {
      "max_qts": {
        "type": "int"
      }
    },
    "return": "Vector_of_long"
  },
  "messages->reorderPinnedDialogs": {
    "params": {
      "force": {
        "type": "Bool"
      },
      "order": {
        "type": "Array of InputPeer"
      }
    },
    "return": "Bool"
  },
  "messages->reorderStickerSets": {
    "params": {
      "masks": {
        "type": "Bool"
      },
      "order": {
        "type": "Array of long"
      }
    },
    "return": "Bool"
  },
  "messages->reportEncryptedSpam": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      }
    },
    "return": "Bool"
  },
  "messages->reportSpam": {
    "params": {
      "peer": {
        "type": "InputPeer"
      }
    },
    "return": "Bool"
  },
  "messages->requestEncryption": {
    "params": {
      "user_id": {
        "type": "InputUser"
      },
      "g_a": {
        "type": "bytes"
      }
    },
    "return": "EncryptedChat"
  },
  "messages->saveDraft": {
    "params": {
      "no_webpage": {
        "type": "Bool"
      },
      "reply_to_msg_id": {
        "type": "int"
      },
      "peer": {
        "type": "InputPeer"
      },
      "message": {
        "type": "string"
      },
      "entities": {
        "type": "Array of MessageEntity"
      }
    },
    "return": "Bool"
  },
  "messages->saveGif": {
    "params": {
      "id": {
        "type": "InputDocument"
      },
      "unsave": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "messages->saveRecentSticker": {
    "params": {
      "attached": {
        "type": "Bool"
      },
      "id": {
        "type": "InputDocument"
      },
      "unsave": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "messages->search": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "q": {
        "type": "string"
      },
      "from_id": {
        "type": "InputUser"
      },
      "filter": {
        "type": "MessagesFilter"
      },
      "min_date": {
        "type": "int"
      },
      "max_date": {
        "type": "int"
      },
      "offset": {
        "type": "int"
      },
      "max_id": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "messages_Messages"
  },
  "messages->searchGifs": {
    "params": {
      "q": {
        "type": "string"
      },
      "offset": {
        "type": "int"
      }
    },
    "return": "messages_FoundGifs"
  },
  "messages->searchGlobal": {
    "params": {
      "q": {
        "type": "string"
      },
      "offset_date": {
        "type": "int"
      },
      "offset_peer": {
        "type": "InputPeer"
      },
      "offset_id": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "messages_Messages"
  },
  "messages->sendEncrypted": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "message": {
        "type": "DecryptedMessage"
      }
    },
    "return": "messages_SentEncryptedMessage"
  },
  "messages->sendEncryptedFile": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "message": {
        "type": "DecryptedMessage"
      },
      "file": {
        "type": "InputEncryptedFile"
      }
    },
    "return": "messages_SentEncryptedMessage"
  },
  "messages->sendEncryptedService": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "message": {
        "type": "DecryptedMessage"
      }
    },
    "return": "messages_SentEncryptedMessage"
  },
  "messages->sendInlineBotResult": {
    "params": {
      "silent": {
        "type": "Bool"
      },
      "background": {
        "type": "Bool"
      },
      "clear_draft": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "reply_to_msg_id": {
        "type": "int"
      },
      "query_id": {
        "type": "long"
      },
      "id": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "messages->sendMedia": {
    "params": {
      "silent": {
        "type": "Bool"
      },
      "background": {
        "type": "Bool"
      },
      "clear_draft": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "reply_to_msg_id": {
        "type": "int"
      },
      "media": {
        "type": "InputMedia"
      },
      "reply_markup": {
        "type": "ReplyMarkup"
      }
    },
    "return": "Updates"
  },
  "messages->sendMessage": {
    "params": {
      "no_webpage": {
        "type": "Bool"
      },
      "silent": {
        "type": "Bool"
      },
      "background": {
        "type": "Bool"
      },
      "clear_draft": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "reply_to_msg_id": {
        "type": "int"
      },
      "message": {
        "type": "string"
      },
      "reply_markup": {
        "type": "ReplyMarkup"
      },
      "entities": {
        "type": "Array of MessageEntity"
      }
    },
    "return": "Updates"
  },
  "messages->sendScreenshotNotification": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "reply_to_msg_id": {
        "type": "int"
      }
    },
    "return": "Updates"
  },
  "messages->setBotCallbackAnswer": {
    "params": {
      "alert": {
        "type": "Bool"
      },
      "query_id": {
        "type": "long"
      },
      "message": {
        "type": "string"
      },
      "url": {
        "type": "string"
      },
      "cache_time": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "messages->setBotPrecheckoutResults": {
    "params": {
      "success": {
        "type": "Bool"
      },
      "query_id": {
        "type": "long"
      },
      "error": {
        "type": "string"
      }
    },
    "return": "Bool"
  },
  "messages->setBotShippingResults": {
    "params": {
      "query_id": {
        "type": "long"
      },
      "error": {
        "type": "string"
      },
      "shipping_options": {
        "type": "Array of ShippingOption"
      }
    },
    "return": "Bool"
  },
  "messages->setEncryptedTyping": {
    "params": {
      "peer": {
        "type": "InputEncryptedChat"
      },
      "typing": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "messages->setGameScore": {
    "params": {
      "edit_message": {
        "type": "Bool"
      },
      "force": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      },
      "id": {
        "type": "int"
      },
      "user_id": {
        "type": "InputUser"
      },
      "score": {
        "type": "int"
      }
    },
    "return": "Updates"
  },
  "messages->setInlineBotResults": {
    "params": {
      "gallery": {
        "type": "Bool"
      },
      "private": {
        "type": "Bool"
      },
      "query_id": {
        "type": "long"
      },
      "results": {
        "type": "Array of InputBotInlineResult"
      },
      "cache_time": {
        "type": "int"
      },
      "next_offset": {
        "type": "string"
      },
      "switch_pm": {
        "type": "InlineBotSwitchPM"
      }
    },
    "return": "Bool"
  },
  "messages->setInlineGameScore": {
    "params": {
      "edit_message": {
        "type": "Bool"
      },
      "force": {
        "type": "Bool"
      },
      "id": {
        "type": "InputBotInlineMessageID"
      },
      "user_id": {
        "type": "InputUser"
      },
      "score": {
        "type": "int"
      }
    },
    "return": "Bool"
  },
  "messages->setTyping": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "action": {
        "type": "SendMessageAction"
      }
    },
    "return": "Bool"
  },
  "messages->startBot": {
    "params": {
      "bot": {
        "type": "InputUser"
      },
      "peer": {
        "type": "InputPeer"
      },
      "start_param": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "messages->toggleChatAdmins": {
    "params": {
      "chat_id": {
        "type": "InputPeer"
      },
      "enabled": {
        "type": "Bool"
      }
    },
    "return": "Updates"
  },
  "messages->toggleDialogPin": {
    "params": {
      "pinned": {
        "type": "Bool"
      },
      "peer": {
        "type": "InputPeer"
      }
    },
    "return": "Bool"
  },
  "messages->uninstallStickerSet": {
    "params": {
      "stickerset": {
        "type": "InputStickerSet"
      }
    },
    "return": "Bool"
  },
  "messages->uploadMedia": {
    "params": {
      "peer": {
        "type": "InputPeer"
      },
      "media": {
        "type": "InputMedia"
      }
    },
    "return": "MessageMedia"
  },
  "payments->clearSavedInfo": {
    "params": {
      "credentials": {
        "type": "Bool"
      },
      "info": {
        "type": "Bool"
      }
    },
    "return": "Bool"
  },
  "payments->getPaymentForm": {
    "params": {
      "msg_id": {
        "type": "int"
      }
    },
    "return": "payments_PaymentForm"
  },
  "payments->getPaymentReceipt": {
    "params": {
      "msg_id": {
        "type": "int"
      }
    },
    "return": "payments_PaymentReceipt"
  },
  "payments->getSavedInfo": {
    "params": {},
    "return": "payments_SavedInfo"
  },
  "payments->sendPaymentForm": {
    "params": {
      "msg_id": {
        "type": "int"
      },
      "requested_info_id": {
        "type": "string"
      },
      "shipping_option_id": {
        "type": "string"
      },
      "credentials": {
        "type": "InputPaymentCredentials"
      }
    },
    "return": "payments_PaymentResult"
  },
  "payments->validateRequestedInfo": {
    "params": {
      "save": {
        "type": "Bool"
      },
      "msg_id": {
        "type": "int"
      },
      "info": {
        "type": "PaymentRequestedInfo"
      }
    },
    "return": "payments_ValidatedRequestedInfo"
  },
  "phone->acceptCall": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      },
      "g_b": {
        "type": "bytes"
      },
      "protocol": {
        "type": "PhoneCallProtocol"
      }
    },
    "return": "phone_PhoneCall"
  },
  "phone->confirmCall": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      },
      "g_a": {
        "type": "bytes"
      },
      "key_fingerprint": {
        "type": "long"
      },
      "protocol": {
        "type": "PhoneCallProtocol"
      }
    },
    "return": "phone_PhoneCall"
  },
  "phone->discardCall": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      },
      "duration": {
        "type": "int"
      },
      "reason": {
        "type": "PhoneCallDiscardReason"
      },
      "connection_id": {
        "type": "long"
      }
    },
    "return": "Updates"
  },
  "phone->getCallConfig": {
    "params": {},
    "return": "DataJSON"
  },
  "phone->receivedCall": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      }
    },
    "return": "Bool"
  },
  "phone->requestCall": {
    "params": {
      "user_id": {
        "type": "InputUser"
      },
      "g_a_hash": {
        "type": "bytes"
      },
      "protocol": {
        "type": "PhoneCallProtocol"
      }
    },
    "return": "phone_PhoneCall"
  },
  "phone->saveCallDebug": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      },
      "debug": {
        "type": "DataJSON"
      }
    },
    "return": "Bool"
  },
  "phone->setCallRating": {
    "params": {
      "peer": {
        "type": "InputPhoneCall"
      },
      "rating": {
        "type": "int"
      },
      "comment": {
        "type": "string"
      }
    },
    "return": "Updates"
  },
  "photos->deletePhotos": {
    "params": {
      "id": {
        "type": "Array of InputPhoto"
      }
    },
    "return": "Vector_of_long"
  },
  "photos->getUserPhotos": {
    "params": {
      "user_id": {
        "type": "InputUser"
      },
      "offset": {
        "type": "int"
      },
      "max_id": {
        "type": "long"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "photos_Photos"
  },
  "photos->updateProfilePhoto": {
    "params": {
      "id": {
        "type": "InputPhoto"
      }
    },
    "return": "UserProfilePhoto"
  },
  "photos->uploadProfilePhoto": {
    "params": {
      "file": {
        "type": "InputFile"
      }
    },
    "return": "photos_Photo"
  },
  "ping": {
    "params": {
      "ping_id": {
        "type": "long"
      }
    },
    "return": "Pong"
  },
  "ping_delay_disconnect": {
    "params": {
      "ping_id": {
        "type": "long"
      },
      "disconnect_delay": {
        "type": "int"
      }
    },
    "return": "Pong"
  },
  "req_DH_params": {
    "params": {
      "nonce": {
        "type": "int128"
      },
      "server_nonce": {
        "type": "int128"
      },
      "p": {
        "type": "string"
      },
      "q": {
        "type": "string"
      },
      "public_key_fingerprint": {
        "type": "long"
      },
      "encrypted_data": {
        "type": "string"
      }
    },
    "return": "Server_DH_Params"
  },
  "req_pq": {
    "params": {
      "nonce": {
        "type": "int128"
      }
    },
    "return": "ResPQ"
  },
  "rpc_drop_answer": {
    "params": {
      "req_msg_id": {
        "type": "long"
      }
    },
    "return": "RpcDropAnswer"
  },
  "set_client_DH_params": {
    "params": {
      "nonce": {
        "type": "int128"
      },
      "server_nonce": {
        "type": "int128"
      },
      "encrypted_data": {
        "type": "string"
      }
    },
    "return": "Set_client_DH_params_answer"
  },
  "stickers->addStickerToSet": {
    "params": {
      "stickerset": {
        "type": "InputStickerSet"
      },
      "sticker": {
        "type": "InputStickerSetItem"
      }
    },
    "return": "messages_StickerSet"
  },
  "stickers->changeStickerPosition": {
    "params": {
      "sticker": {
        "type": "InputDocument"
      },
      "position": {
        "type": "int"
      }
    },
    "return": "messages_StickerSet"
  },
  "stickers->createStickerSet": {
    "params": {
      "masks": {
        "type": "Bool"
      },
      "user_id": {
        "type": "InputUser"
      },
      "title": {
        "type": "string"
      },
      "short_name": {
        "type": "string"
      },
      "stickers": {
        "type": "Array of InputStickerSetItem"
      }
    },
    "return": "messages_StickerSet"
  },
  "stickers->removeStickerFromSet": {
    "params": {
      "sticker": {
        "type": "InputDocument"
      }
    },
    "return": "messages_StickerSet"
  },
  "updates->getChannelDifference": {
    "params": {
      "force": {
        "type": "Bool"
      },
      "channel": {
        "type": "InputChannel"
      },
      "filter": {
        "type": "ChannelMessagesFilter"
      },
      "pts": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "updates_ChannelDifference"
  },
  "updates->getDifference": {
    "params": {
      "pts": {
        "type": "int"
      },
      "pts_total_limit": {
        "type": "int"
      },
      "date": {
        "type": "int"
      },
      "qts": {
        "type": "int"
      }
    },
    "return": "updates_Difference"
  },
  "updates->getState": {
    "params": {},
    "return": "updates_State"
  },
  "upload->getCdnFile": {
    "params": {
      "file_token": {
        "type": "bytes"
      },
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "upload_CdnFile"
  },
  "upload->getCdnFileHashes": {
    "params": {
      "file_token": {
        "type": "bytes"
      },
      "offset": {
        "type": "int"
      }
    },
    "return": "Vector_of_CdnFileHash"
  },
  "upload->getFile": {
    "params": {
      "location": {
        "type": "InputFileLocation"
      },
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "upload_File"
  },
  "upload->getWebFile": {
    "params": {
      "location": {
        "type": "InputWebFileLocation"
      },
      "offset": {
        "type": "int"
      },
      "limit": {
        "type": "int"
      }
    },
    "return": "upload_WebFile"
  },
  "upload->reuploadCdnFile": {
    "params": {
      "file_token": {
        "type": "bytes"
      },
      "request_token": {
        "type": "bytes"
      }
    },
    "return": "Vector_of_CdnFileHash"
  },
  "upload->saveBigFilePart": {
    "params": {
      "file_id": {
        "type": "long"
      },
      "file_part": {
        "type": "int"
      },
      "file_total_parts": {
        "type": "int"
      },
      "bytes": {
        "type": "bytes"
      }
    },
    "return": "Bool"
  },
  "upload->saveFilePart": {
    "params": {
      "file_id": {
        "type": "long"
      },
      "file_part": {
        "type": "int"
      },
      "bytes": {
        "type": "bytes"
      }
    },
    "return": "Bool"
  },
  "users->getFullUser": {
    "params": {
      "id": {
        "type": "InputUser"
      }
    },
    "return": "UserFull"
  },
  "users->getUsers": {
    "params": {
      "id": {
        "type": "Array of InputUser"
      }
    },
    "return": "Vector_of_User"
  }
}
